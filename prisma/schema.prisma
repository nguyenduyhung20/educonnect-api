generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/databases"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id        Int       @id
  username  String?   @unique @db.VarChar
  password  String?   @db.VarChar
  avatar    String?   @db.VarChar
  role      user_role
  create_at DateTime  @default(now()) @db.Timestamp(6)
  update_at DateTime  @default(now()) @db.Timestamp(6)
  deleted   Boolean   @default(false)
  user      user      @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model admin {
  id        Int      @id
  school_id Int?
  create_at DateTime @default(now()) @db.Timestamp(6)
  update_at DateTime @default(now()) @db.Timestamp(6)
  deleted   Boolean  @default(false)
  user      user     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school    school?  @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model classroom {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar
  create_at DateTime @default(now()) @db.Timestamp(6)
  update_at DateTime @default(now()) @db.Timestamp(6)
  deleted   Boolean  @default(false)
  school_id Int?
  school    school?  @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learn     learn[]
  of        of[]
}

model document {
  id            Int      @id @default(autoincrement())
  title         String?  @db.VarChar
  url           String?  @db.VarChar
  create_at     DateTime @default(now()) @db.Timestamp(6)
  update_at     DateTime @default(now()) @db.Timestamp(6)
  deleted       Boolean  @default(false)
  subject_id    Int?
  teacher_id    Int?
  document_uuid String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subject       subject? @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher       teacher? @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow {
  follower_id                   Int
  followed_id                   Int
  follow_times                  Int      @default(1)
  create_at                     DateTime @default(now()) @db.Timestamp(6)
  update_at                     DateTime @default(now()) @db.Timestamp(6)
  deleted                       Boolean  @default(false)
  user_follow_followed_idTouser user     @relation("follow_followed_idTouser", fields: [followed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_follow_follower_idTouser user     @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([followed_id, follower_id, follow_times])
}

model group {
  id         Int      @id @default(autoincrement())
  title      String?  @db.VarChar
  meta_title String?  @db.VarChar
  create_at  DateTime @default(now()) @db.Timestamp(6)
  update_at  DateTime @default(now()) @db.Timestamp(6)
  deleted    Boolean  @default(false)
  group_uuid String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  member     member[]
  post       post[]
}

model interact {
  user_id   Int
  post_id   Int
  type      interact_type?
  create_at DateTime       @default(now()) @db.Timestamp(6)
  update_at DateTime       @default(now()) @db.Timestamp(6)
  deleted   Boolean        @default(false)
  post      post           @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, post_id])
}

model learn {
  class_id   Int
  subject_id Int
  create_at  DateTime  @default(now()) @db.Timestamp(6)
  update_at  DateTime  @default(now()) @db.Timestamp(6)
  deleted    Boolean   @default(false)
  classroom  classroom @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject    subject   @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([class_id, subject_id])
}

model member {
  user_id   Int
  group_id  Int
  role      member_role?
  status    member_status?
  create_at DateTime       @default(now()) @db.Timestamp(6)
  update_at DateTime       @default(now()) @db.Timestamp(6)
  deleted   Boolean        @default(false)
  group     group          @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, group_id])
}

model notification {
  id        Int      @id @default(autoincrement())
  user_id   Int
  message   String?  @db.VarChar
  is_read   Boolean  @default(false)
  create_at DateTime @default(now()) @db.Timestamp(6)
  update_at DateTime @default(now()) @db.Timestamp(6)
  deleted   Boolean  @default(false)
  user      user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model of {
  student_id Int
  class_id   Int
  create_at  DateTime  @default(now()) @db.Timestamp(6)
  update_at  DateTime  @default(now()) @db.Timestamp(6)
  deleted    Boolean   @default(false)
  classroom  classroom @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student    student   @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([student_id, class_id])
}

model parent {
  id        Int       @id
  create_at DateTime  @default(now()) @db.Timestamp(6)
  update_at DateTime  @default(now()) @db.Timestamp(6)
  deleted   Boolean   @default(false)
  user      user      @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student   student[]
}

model post {
  id             Int        @id @default(autoincrement())
  title          String     @default("") @db.VarChar
  content        String?    @db.VarChar
  create_at      DateTime   @default(now()) @db.Timestamp(6)
  update_at      DateTime   @default(now()) @db.Timestamp(6)
  deleted        Boolean    @default(false)
  post_uuid      String     @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        Int
  parent_post_id Int?
  group_id       Int?
  interact       interact[]
  group          group?     @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post           post?      @relation("postTopost", fields: [parent_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_post     post[]     @relation("postTopost")
  user           user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model school {
  id        Int         @id @default(autoincrement())
  address   String?     @db.VarChar
  name      String?     @db.VarChar
  create_at DateTime    @default(now()) @db.Timestamp(6)
  update_at DateTime    @default(now()) @db.Timestamp(6)
  deleted   Boolean     @default(false)
  admin     admin[]
  classroom classroom[]
}

model student {
  id         Int          @id
  parent_id  Int?
  create_at  DateTime     @default(now()) @db.Timestamp(6)
  update_at  DateTime     @default(now()) @db.Timestamp(6)
  deleted    Boolean      @default(false)
  of         of[]
  user       user         @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent     parent?      @relation(fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transcript transcript[]
}

model subject {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  create_at  DateTime     @default(now()) @db.Timestamp(6)
  update_at  DateTime     @default(now()) @db.Timestamp(6)
  deleted    Boolean      @default(false)
  document   document[]
  learn      learn[]
  teaching   teaching[]
  transcript transcript[]
}

model teacher {
  id        Int        @id
  create_at DateTime   @default(now()) @db.Timestamp(6)
  update_at DateTime   @default(now()) @db.Timestamp(6)
  deleted   Boolean    @default(false)
  document  document[]
  user      user       @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teaching  teaching[]
}

model teaching {
  subject_id Int
  teacher_id Int
  create_at  DateTime @default(now()) @db.Timestamp(6)
  update_at  DateTime @default(now()) @db.Timestamp(6)
  deleted    Boolean  @default(false)
  subject    subject  @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher    teacher  @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([subject_id, teacher_id])
}

model transcript {
  id                    Int      @id @default(autoincrement())
  fifteen_minutes_score Float?
  midterm_score         Float?
  final_score           Float?
  create_at             DateTime @default(now()) @db.Timestamp(6)
  update_at             DateTime @default(now()) @db.Timestamp(6)
  deleted               Boolean  @default(false)
  student_id            Int?
  subject_id            Int?
  student               student? @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject               subject? @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              Int            @id @default(autoincrement())
  address                         String?        @db.VarChar
  name                            String?        @db.VarChar
  phone                           String?        @db.VarChar
  birthday                        DateTime?      @db.Timestamp(6)
  email                           String?        @db.VarChar
  ssn                             String?        @unique @db.VarChar
  sex                             user_sex?
  create_at                       DateTime       @default(now()) @db.Timestamp(6)
  update_at                       DateTime       @default(now()) @db.Timestamp(6)
  deleted                         Boolean        @default(false)
  user_uuid                       String         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  account                         account?
  admin                           admin?
  follow_follow_followed_idTouser follow[]       @relation("follow_followed_idTouser")
  follow_follow_follower_idTouser follow[]       @relation("follow_follower_idTouser")
  interact                        interact[]
  member                          member[]
  notification                    notification[]
  parent                          parent?
  post                            post[]
  student                         student?
  teacher                         teacher?
}

enum interact_type {
  like
  love
  haha
  wow
  sad
  angry
}

enum member_role {
  admin
  user
}

enum member_status {
  block
  active
  pending
}

enum user_role {
  admin
  teacher
  student
  parent
  user
}

enum user_sex {
  male
  female
  other
}
